\AgdaHide{
\begin{code}
module PHOPL.Red.Confluent where
open import PHOPL.Red

Critical-Pairs : ∀ {V} {K} {C} {c : Constructor (SK C K)} {E : ListAbs V C} {F} {G} → R c E F → R c E G → Σ[ H ∈ Expression V K ] F ↠ H × G ↠ H
Critical-Pairs βT βT = _ ,p ref ,p ref
Critical-Pairs βR βR = _ ,p ref ,p ref
Critical-Pairs plus-ref plus-ref = _ ,p ref ,p ref
Critical-Pairs minus-ref minus-ref = _ ,p ref ,p ref
Critical-Pairs plus-univ plus-univ = _ ,p ref ,p ref
Critical-Pairs minus-univ minus-univ = _ ,p ref ,p ref
Critical-Pairs ref⊃*univ ref⊃*univ = _ ,p ref ,p ref
Critical-Pairs univ⊃*ref univ⊃*ref = _ ,p ref ,p ref
Critical-Pairs univ⊃*univ univ⊃*univ = _ ,p ref ,p ref
Critical-Pairs ref⊃*ref ref⊃*ref = _ ,p ref ,p ref
Critical-Pairs refref refref = _ ,p ref ,p ref
Critical-Pairs βE βE = _ ,p ref ,p ref
Critical-Pairs reflamvar reflamvar = _ ,p ref ,p ref
Critical-Pairs reflam⊃* reflam⊃* = _ ,p ref ,p ref
Critical-Pairs reflamuniv reflamuniv = _ ,p ref ,p ref
Critical-Pairs reflamλλλ reflamλλλ = _ ,p ref ,p ref

pre-confluent : ∀ {V} {K} {C} {c : Constructor (SK C K)} {E E' : ListAbs V C} {F} →
  R c E F → E ⇒ E' → Σ[ F' ∈ Expression V K ] R c E' F' × F ↠ F'
pre-confluent E▷F E⇒E' = {!!}
\end{code}
}
